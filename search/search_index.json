{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Django-OAPIF","text":"<p>Django-OAPIF allows to easily expose your Django models through an OGC API Features endpoint. It is based on Django REST Framework.</p>"},{"location":"api/","title":"API documentation","text":""},{"location":"api/#django_oapif.decorators.register_oapif_viewset","title":"<code>register_oapif_viewset(key=None, serialize_geom_in_db=True, geom_field='geom', crs=None, custom_serializer_attrs=None, custom_viewset_attrs=None)</code>","text":"<p>This decorator takes care of all boilerplate code (creating a serializer, a viewset and registering it) to register a model to the default OAPIF endpoint.</p> <ul> <li>key: allows to pass a custom name for the collection (defaults to the model's label)</li> <li>serialize_geom_in_db: delegate the geometry serialization to the DB</li> <li>geom_field: the geometry field name. If None, a null geometry is produced</li> <li>crs: the EPSG code, if empty CRS84 is assumed</li> <li>custom_serializer_attrs: allows to pass custom attributes to set to the serializer's Meta (e.g. custom fields)</li> <li>custom_viewset_attrs: allows to pass custom attributes to set to the viewset (e.g. custom pagination class)</li> </ul> Source code in <code>django_oapif/decorators.py</code> <pre><code>def register_oapif_viewset(\n    key: Optional[str] = None,\n    serialize_geom_in_db: Optional[bool] = True,\n    geom_field: [str] = \"geom\",\n    crs: Optional[int] = None,\n    custom_serializer_attrs: Dict[str, Any] = None,\n    custom_viewset_attrs: Dict[str, Any] = None,\n) -&gt; Callable[[Any], models.Model]:\n    \"\"\"\n    This decorator takes care of all boilerplate code (creating a serializer, a viewset and registering it) to register\n    a model to the default OAPIF endpoint.\n\n    - key: allows to pass a custom name for the collection (defaults to the model's label)\n    - serialize_geom_in_db: delegate the geometry serialization to the DB\n    - geom_field: the geometry field name. If None, a null geometry is produced\n    - crs: the EPSG code, if empty CRS84 is assumed\n    - custom_serializer_attrs: allows to pass custom attributes to set to the serializer's Meta (e.g. custom fields)\n    - custom_viewset_attrs: allows to pass custom attributes to set to the viewset (e.g. custom pagination class)\n    \"\"\"\n\n    if custom_serializer_attrs is None:\n        custom_serializer_attrs = {}\n\n    if custom_viewset_attrs is None:\n        custom_viewset_attrs = {}\n\n    def inner(Model):\n        \"\"\"\n        Create the serializers\n        \"\"\"\n\n        Model.crs = crs\n\n        if serialize_geom_in_db and geom_field:\n\n            class AutoSerializer(GeoFeatureModelSerializer):\n                _geom_geojson = serializers.JSONField(required=False, allow_null=True, read_only=True)\n\n                class Meta:\n                    model = Model\n                    exclude = [geom_field]\n                    geo_field = \"_geom_geojson\"\n\n                def to_internal_value(self, data):\n                    # TODO: this needs improvement!!!\n                    geo = None\n                    if \"geometry\" in data:\n                        geo = data[\"geometry\"]\n                        if crs not in geo:\n                            geo[\"crs\"] = {\"type\": \"name\", \"properties\": {\"name\": f\"urn:ogc:def:crs:EPSG::{Model.crs}\"}}\n                    data = super().to_internal_value(data)\n                    if geo:\n                        data[geom_field] = GEOSGeometry(json.dumps(geo))\n                    return data\n\n        else:\n\n            class AutoSerializer(GeoFeatureModelSerializer):\n                class Meta:\n                    model = Model\n                    fields = \"__all__\"\n                    geo_field = geom_field\n\n                def to_internal_value(self, data):\n                    # TODO: this needs improvement!!!\n                    if \"geometry\" in data and \"crs\" not in data[\"geometry\"]:\n                        data[\"geometry\"][\"crs\"] = {\n                            \"type\": \"name\",\n                            \"properties\": {\"name\": f\"urn:ogc:def:crs:EPSG::{Model.crs}\"},\n                        }\n                    data = super().to_internal_value(data)\n                    return data\n\n        # Create the viewset\n        class OgcAPIFeatureViewSet(OAPIFDescribeModelViewSetMixin, viewsets.ModelViewSet):\n            queryset = Model.objects.all()\n            serializer_class = AutoSerializer\n\n            # TODO: these should probably be moved to the mixin\n            oapif_title = Model._meta.verbose_name\n            oapif_description = Model.__doc__\n\n            oapif_geom_lookup = geom_field\n\n            filter_backends = [BboxFilterBackend]\n\n            # Allowing '.' and '-' in urls\n            lookup_value_regex = r\"[\\w.-]+\"\n\n            # Metadata\n            metadata_class = OAPIFMetadata\n\n            def get_success_headers(self, data):\n                location = reverse.reverse(f\"{self.basename}-detail\", {\"lookup\": data[Model._meta.pk.column]})\n                headers = {\"Location\": location}\n                return headers\n\n            def finalize_response(self, request, response, *args, **kwargs):\n                response = super().finalize_response(request, response, *args, **kwargs)\n                if request.method == \"OPTIONS\":\n                    allowed_actions = self.metadata_class().determine_actions(request, self)\n                    allowed_actions = \", \".join(allowed_actions.keys())\n                    response.headers[\"Allow\"] = allowed_actions\n                return response\n\n            def get_queryset(self):\n                qs = super().get_queryset()\n\n                if serialize_geom_in_db and geom_field:\n                    qs = qs.annotate(_geom_geojson=Cast(AsGeoJSON(geom_field, False, False), models.JSONField()))\n\n                return qs\n\n        # Apply custom serializer attributes\n        for k, v in custom_serializer_attrs.items():\n            setattr(AutoSerializer.Meta, k, v)\n\n        # Apply custom viewset attributes\n        for k, v in custom_viewset_attrs.items():\n            setattr(OgcAPIFeatureViewSet, k, v)\n\n        # Register the model\n        oapif_router.register(key or Model._meta.label_lower, OgcAPIFeatureViewSet, key or Model._meta.label_lower)\n\n        return Model\n\n    return inner\n</code></pre>"},{"location":"demo/","title":"Try the demo","text":""},{"location":"demo/#setup","title":"Setup","text":"<p>This lets you run the compose application locally and demo it:</p> <p><pre><code># copy default conf\ncp .env.example .env\n\n# start the stack\ndocker compose up --build -d\n\n# deploy static files and migrate database\ndocker compose exec django python manage.py collectstatic --no-input\ndocker compose exec django python manage.py migrate --no-input\n\n# A convenience start-up Django command is there\n# to populate the database with testdata\ndocker compose exec django python manage.py populate_users\ndocker compose exec django python manage.py populate_data\n</code></pre> After waiting little you'll be able to access all collections at http://0.0.0.0:7180/oapif/collections.</p> <p>Three users are provided out of the box; they can be logged in with through basic authentication; all <code>123</code> for password: - <code>demo_viewer</code> - <code>demo_editor</code> - <code>admin</code></p> <p>As expected <code>admin</code> can access Django Admin at http://0.0.0.0:7180/admin.</p>"},{"location":"demo/#use-from-qgis","title":"Use from QGIS","text":"<p>When up and running you can access the REST API from QGIS like this:</p> <ul> <li>Go to <code>Layers</code> &gt; <code>Add layer</code> &gt; <code>Add WFS Layer...</code></li> <li>Create a new connection</li> <li>URL: <code>https://0.0.0.0:7180/oapif/</code></li> <li>Version: <code>OGC API - Features</code></li> <li>Click OK and ignore choose to ignore the invalid certificate error and store the exception</li> <li>You should see the two layers in the list, select them and choose <code>add</code>.</li> </ul>"},{"location":"permissions/","title":"Custom authentication &amp; permissions","text":"<p>By default the viewsets use <code>DjangoModelPermissionsOrAnonReadOnly</code> permissions class from DRF.</p> <p>This can be altered in the DRF settings by adapting <code>DEFAULT_PERMISSION_CLASSES</code>.</p> <p>You can also add custom permissions when registering their corresponding viewsets, as <code>permission_classes</code>. Example in <code>models.py</code>:</p> <pre><code>from rest_framework import permissions\nfrom django.contrib.gis.db import models\nfrom django_oapif import register_oapif_viewset\n\n@register_oapif_viewset(\n    custom_viewset_attrs={\n        \"permission_classes\": (permissions.DjangoModelPermissionsOrAnonReadOnly,)\n    }\n)\nclass MyModel(models.Model):\n    ...\n</code></pre>"},{"location":"quick-start/","title":"Quickstart","text":""},{"location":"quick-start/#installation","title":"Installation","text":"<p>Install with your favorite package manager</p> <pre><code>pip install --user https://github.com/opengisch/django-oapif\n</code></pre>"},{"location":"quick-start/#enable-the-app","title":"Enable the app","text":"<p>Edit settings.py</p> <pre><code>INSTALLED_APPS = [\n    ...\n    \"django_oapif\",\n    \"rest_framework\",\n    \"rest_framework_gis\",\n]\n</code></pre> <p>Add this to your <code>urls.py</code> :</p> <p>urlpatterns += [     ...,     path(\"oapif/\", include(django_oapif.urls)),     ..., ]</p>"},{"location":"quick-start/#register-your-models-with-the-decorator","title":"Register your models with the decorator:","text":"<pre><code># models.py\n\nfrom django.contrib.gis.db import models\nfrom django_oapif.decorators import register_oapif_viewset\n\n\n@register_oapif_viewset()\nclass TestingDecorator(models.Model):\n    name = models.CharField(max_length=10)\n    geom = models.PointField(srid=2056)\n</code></pre>"},{"location":"quick-start/#configure-global-settings","title":"Configure global settings","text":"<p>Optionally specify your endpoint's metadata in <code>settings.py</code>:</p> <pre><code># settings.py\n...\n\nOAPIF_TITLE = \"My Endpoint\"\nOAPIF_DESCRIPTION = \"Description\"\n</code></pre> <p>Voil\u00e0 ! Your OAPIF endpoint should be ready to use.</p>"},{"location":"tests/","title":"Test and conformance","text":""},{"location":"tests/#run-tests","title":"Run tests","text":"<pre><code># unit tests\ndocker compose exec django python manage.py test\n\n# integration tests\ndocker compose --profile testing_integration up -d\ndocker compose run integration_tests\n</code></pre>"},{"location":"tests/#ogc-conformance","title":"OGC Conformance","text":"<p>You can run the OGC API conformance test suite like this:</p> <pre><code>docker compose --profile testing_conformance up --build -d\ndocker compose exec django python manage.py migrate --no-input\ndocker compose exec django python manage.py populate_users\ndocker compose exec django python manage.py populate_data\ndocker compose run conformance_test\n</code></pre> <p>Results will be stored to `tests/output/emailable-report.html</p>"}]}